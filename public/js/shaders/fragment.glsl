
uniform float time;
uniform vec2 resolution;

int seed = 1;
int x = 3253;
int y = 120260157;
int p[256];
int perm[512];



int bwAnd255(int num){
	float x = floor(float(num)/256.0);
	return num - ( int(x) * 256 );
}
int reminderOp(int num){
	float x = floor(float(num)/12.0);
	return num - ( int(x) * 12 );
}

void noise(int xin,int yin){
	float n0, n1, n2; // Noise contributions from the three corners
	// Skew the input space to determine which simplex cell we're in
	float F2f = 0.5 * ( sqrt(3.0) - 1.0 );
	int F2 = int(F2f);
	int s = ( xin + yin ) * F2; // Hairy factor for 2D
	
	int i = xin + s;
	int j = yin + s;
	
	float G2f = ( 3.0 - sqrt(3.0) ) / 6.0;
	int G2 = int(G2f);
	int t = ( i + j ) * G2;
	int X0 = i-t; // Unskew the cell origin back to (x,y) space
	int Y0 = j-t;

	int x0 = xin-X0; // The x,y distances from the cell origin
	int y0 = yin-Y0;
	
	int i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
	if( x0 > y0 ) { i1 = 1; j1 = 0; } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
	else { i1 = 0; j1 = 1;}
	int x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
	
	int y1 = y0 - j1 + G2;
	int x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords
	int y2 = y0 - 1 + 2 * G2;

	int ii = bwAnd255(i);
	int jj = bwAnd255(j);

	//int gi0 = reminderOp(perm[ii+perm[jj]]);
	// float var gi1 = perm[ii+i1+perm[jj+j1]] % 12.0;
	// float var gi2 = perm[ii+1+perm[jj+1]] % 12.0;
}
void main( void ) {
	p[134,102,237,12,140,160,140,21,229,25,122,116,230,237,51,79,72,82,255,210,66,64,127,216,158,157,177,97,110,235,16,112,249,241,75,55,179,20,166,53,210,44,222,209,107,122,50,185,30,25,95,202,245,153,154,128,70,162,120,193,253,76,22,173,34,90,69,187,100,155,170,50,81,72,195,75,141,189,61,164,168,114,216,223,70,25,216,87,251,134,13,10,7,176,32,249,51,93,46,130,134,201,201,55,230,45,63,214,128,150,49,168,220,109,219,23,169,159,58,95,129,129,56,209,170,225,235,75,104,243,223,105,202,146,97,237,81,59,44,196,52,116,85,214,42,191,45,244,91,103,252,150,230,150,21,71,246,191,147,84,28,73,66,85,101,104,231,138,54,37,102,70,187,94,142,161,174,204,145,59,28,45,93,141,173,213,145,116,137,173,79,17,38,159,207,38,57,26,235,107,5,139,229,151,158,153,131,208,3,156,89,223,97,31,54,56,94,16,144,208,63,208,82,121,220,49,110,196,234,229,21,36,37,203,179,103,85,10,199,210,172,81,167,2,192,114,0,254,171,106,34,131,134,31,140,184,134,102,237,12,140,160,140,21,229,25,122,116,230,237,51,79,72,82,255,210,66,64,127,216,158,157,177,97,110,235,16,112,249,241,75,55,179,20,166,53,210,44,222,209,107,122,50,185,30,25,95,202,245,153,154,128,70,162,120,193,253,76,22,173,34,90,69,187,100,155,170,50,81,72,195,75,141,189,61,164,168,114,216,223,70,25,216,87,251,134,13,10,7,176,32,249,51,93,46,130,134,201,201,55,230,45,63,214,128,150,49,168,220,109,219,23,169,159,58,95,129,129,56,209,170,225,235,75,104,243,223,105,202,146,97,237,81,59,44,196,52,116,85,214,42,191,45,244,91,103,252,150,230,150,21,71,246,191,147,84,28,73,66,85,101,104,231,138,54,37,102,70,187,94,142,161,174,204,145,59,28,45,93,141,173,213,145,116,137,173,79,17,38,159,207,38,57,26,235,107,5,139,229,151,158,153,131,208,3,156,89,223,97,31,54,56,94,16,144,208,63,208,82,121,220,49,110,196,234,229,21,36,37,203,179,103,85,10,199,210,172,81,167,2,192,114,0,254,171,106,34,131,134,31,140,184];
	perm[134,102,237,12,140,160,140,21,229,25,122,116,230,237,51,79,72,82,255,210,66,64,127,216,158,157,177,97,110,235,16,112,249,241,75,55,179,20,166,53,210,44,222,209,107,122,50,185,30,25,95,202,245,153,154,128,70,162,120,193,253,76,22,173,34,90,69,187,100,155,170,50,81,72,195,75,141,189,61,164,168,114,216,223,70,25,216,87,251,134,13,10,7,176,32,249,51,93,46,130,134,201,201,55,230,45,63,214,128,150,49,168,220,109,219,23,169,159,58,95,129,129,56,209,170,225,235,75,104,243,223,105,202,146,97,237,81,59,44,196,52,116,85,214,42,191,45,244,91,103,252,150,230,150,21,71,246,191,147,84,28,73,66,85,101,104,231,138,54,37,102,70,187,94,142,161,174,204,145,59,28,45,93,141,173,213,145,116,137,173,79,17,38,159,207,38,57,26,235,107,5,139,229,151,158,153,131,208,3,156,89,223,97,31,54,56,94,16,144,208,63,208,82,121,220,49,110,196,234,229,21,36,37,203,179,103,85,10,199,210,172,81,167,2,192,114,0,254,171,106,34,131,134,31,140,184,134,102,237,12,140,160,140,21,229,25,122,116,230,237,51,79,72,82,255,210,66,64,127,216,158,157,177,97,110,235,16,112,249,241,75,55,179,20,166,53,210,44,222,209,107,122,50,185,30,25,95,202,245,153,154,128,70,162,120,193,253,76,22,173,34,90,69,187,100,155,170,50,81,72,195,75,141,189,61,164,168,114,216,223,70,25,216,87,251,134,13,10,7,176,32,249,51,93,46,130,134,201,201,55,230,45,63,214,128,150,49,168,220,109,219,23,169,159,58,95,129,129,56,209,170,225,235,75,104,243,223,105,202,146,97,237,81,59,44,196,52,116,85,214,42,191,45,244,91,103,252,150,230,150,21,71,246,191,147,84,28,73,66,85,101,104,231,138,54,37,102,70,187,94,142,161,174,204,145,59,28,45,93,141,173,213,145,116,137,173,79,17,38,159,207,38,57,26,235,107,5,139,229,151,158,153,131,208,3,156,89,223,97,31,54,56,94,16,144,208,63,208,82,121,220,49,110,196,234,229,21,36,37,203,179,103,85,10,199,210,172,81,167,2,192,114,0,254,171,106,34,131,134,31,140,184,134,102,237,12,140,160,140,21,229,25,122,116,230,237,51,79,72,82,255,210,66,64,127,216,158,157,177,97,110,235,16,112,249,241,75,55,179,20,166,53,210,44,222,209,107,122,50,185,30,25,95,202,245,153,154,128,70,162,120,193,253,76,22,173,34,90,69,187,100,155,170,50,81,72,195,75,141,189,61,164,168,114,216,223,70,25,216,87,251,134,13,10,7,176,32,249,51,93,46,130,134,201,201,55,230,45,63,214,128,150,49,168,220,109,219,23,169,159,58,95,129,129,56,209,170,225,235,75,104,243,223,105,202,146,97,237,81,59,44,196,52,116,85,214,42,191,45,244,91,103,252,150,230,150,21,71,246,191,147,84,28,73,66,85,101,104,231,138,54,37,102,70,187,94,142,161,174,204,145,59,28,45,93,141,173,213,145,116,137,173,79,17,38,159,207,38,57,26,235,107,5,139,229,151,158,153,131,208,3,156,89,223,97,31,54,56,94,16,144,208,63,208,82,121,220,49,110,196,234,229,21,36,37,203,179,103,85,10,199,210,172,81,167,2,192,114,0,254,171,106,34,131,134,31,140,184,134,102,237,12,140,160,140,21,229,25,122,116,230,237,51,79,72,82,255,210,66,64,127,216,158,157,177,97,110,235,16,112,249,241,75,55,179,20,166,53,210,44,222,209,107,122,50,185,30,25,95,202,245,153,154,128,70,162,120,193,253,76,22,173,34,90,69,187,100,155,170,50,81,72,195,75,141,189,61,164,168,114,216,223,70,25,216,87,251,134,13,10,7,176,32,249,51,93,46,130,134,201,201,55,230,45,63,214,128,150,49,168,220,109,219,23,169,159,58,95,129,129,56,209,170,225,235,75,104,243,223,105,202,146,97,237,81,59,44,196,52,116,85,214,42,191,45,244,91,103,252,150,230,150,21,71,246,191,147,84,28,73,66,85,101,104,231,138,54,37,102,70,187,94,142,161,174,204,145,59,28,45,93,141,173,213,145,116,137,173,79,17,38,159,207,38,57,26,235,107,5,139,229,151,158,153,131,208,3,156,89,223,97,31,54,56,94,16,144,208,63,208,82,121,220,49,110,196,234,229,21,36,37,203,179,103,85,10,199,210,172,81,167,2,192,114,0,254,171,106,34,131,134,31,140,184];
	vec2 position = - 1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;
	float red = abs( sin( position.x * position.y + time / 5.0 ) );
	float green = abs( sin( position.x * position.y + time / 4.0 ) );
	float blue = abs( sin( position.x * position.y + time / 3.0 ) );
	gl_FragColor = vec4( 255, 0, 0, 1.0 );
}